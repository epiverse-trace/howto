---
title: "Estimate the fraction of cases that are observed (ascertainment) using EpiNow2"
author:
  - name: "James M. Azam"
    orcid: "0000-0001-5782-7330"
format:
  html:
    code-link: true
editor: source
editor_options:
  chunk_output_type: console
date: last-modified
toc: true
toc_float: true
---

```{r, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>"
)
```

## Ingredients

- `example_confirmed` dataset from the `{EpiNow2}` R package
- `convolve_and_scale()` from the `{EpiNow2}` R package
- `estimate_secondary()` from the `{EpiNow2}` R package
- `mcmc_hist()` from the `{bayesplot}` R package
- `labs()` from the `{ggplot2}` R package
- `detectCores()` from the `{parallel}` R package

## Steps in code

```{r}
#| warning: false

# Set cores for speedup in stan
options(mc.cores = parallel::detectCores() - 2)

# load data.table for manipulation
library(data.table)
library(bayesplot)
library(ggplot2)
library(EpiNow2)

# Incidence data example
# make some example secondary incidence data
df <- example_confirmed
df <- data.table::as.data.table(df)[, primary := confirm]
# 1. Assume that only 40 percent of cases are reported (scaling)
# 2. Add parameters of the assumed log normal delay distribution
# for use with the convolve_and_scale() function.
df[, `:=`(scaling = 0.4, meanlog = 1.8, sdlog = 0.5)]

# Simulate secondary cases
df <- EpiNow2::convolve_and_scale(df, type = "incidence")

# Print input data frame 
df

# Fit model to example data specifying a weak prior for fraction reported
# (scale) with a secondary case
res <- EpiNow2::estimate_secondary(
  df,
  obs = obs_opts(
    scale = EpiNow2::Normal(mean = 0.2, sd = 0.2),
    week_effect = FALSE
  )
)

# Plot primary and secondary observations with fitted model
# From infections to reported cases
# plot(res, primary = TRUE)

# Print the fit to find the row named: params[1]
# res$fit

# Construct frac_obs parameter
frac_obs_var <- paste0("params[", res$data$frac_obs_id, "]")

# Summary of the ascertainment rate posterior
res$posterior[variable == frac_obs_var]

# Plot density
frac_obs_plot <- bayesplot::mcmc_hist(
  x = res$fit,
  pars = frac_obs_var
) +
  labs(
    title = "Posterior distribution of fraction of cases observed (ascertainment)",
    x = "Fraction of cases observed",
    y = "Density"
  )

plot(frac_obs_plot)
```

## Steps in detail

<!-- OPTIONAL -->

<!-- reduce length of strings with a large language model like chatgpt -->

- We use `detectCores()` to detect and use available cores on your local machine to fit the stan models. This improves the speed of the model fitting runs.
- We use `convolve_and_scale()` to simulate secondary observations from the reported cases data (`example_confirmed`). To do this, we assume that only 40 percent of cases are reported (`scaling = 0.4`).
  - To use the convolve_and_scale() function, which assumes a lognormal distribution, we also add the parameters of the assumed log normal delay distribution (meanlog and sdlog) as columns in the dataset.
- We then generate the dataset that contains the secondary observations using the `estimate_secondary()` function.
  - We use an observation model and set a `Normal(mean = 0.2, sd = 0.2)` prior on the ascertainment rate for obtaining the posterior
- The parameters posterior manifests in the data returned by EpiNow2 as the column `params[N]`, where $N$ is the id of the parameter
- The parameter id is also stored in EpiNow2's data output, so we extract the one for `frac_obs`, which is the ascertainment rate
- We plot the histogram of the posterior using `mcmc_hist()`. You can explore other plotting functions from `{bayesplot}`. Another good option is `bayesplot::mcmc_density()`.

<!-- must: keep to warn users on how to install packages -->

Please note that the code assumes the necessary packages are already installed. If they are not, you can install them using first the `install.packages("pak")` function and then the `pak::pak()` function for both packages in CRAN or GitHub before loading them with `library()`. 
